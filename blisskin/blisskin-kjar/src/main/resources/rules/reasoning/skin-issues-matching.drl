package rules.reasoning;
dialect  "mvel"

import sbnz.blisskin.model.dto.*;
import sbnz.blisskin.model.enumerations.*;
import sbnz.blisskin.model.*;
import java.util.List;

rule "Treatment requested"
    when
        $request: TreatmentRequest($si: skinIssues)
        $patientSkinIssues: List() from accumulate (
            SkinIssue($name: name) from $si,
            collectList($name)
        )
    then
end

rule "Group 1 - hydration" extends "Treatment requested"
    when
        $ingredient: Ingredient(ingredientGroup == IngredientGroup.HYDRATION,
                                $ingrSkinIssues: targetedSkinIssues)
        $matchedSkinIssues: Number() from accumulate (
            SkinIssue(
                name memberOf $patientSkinIssues
            ) from $ingrSkinIssues,
            count(1)
        )
    then
        MatchedIngredient matchedIngredient = new MatchedIngredient();
        matchedIngredient.setSkinIssuesValue($matchedSkinIssues.floatValue() / $ingredient.getTargetedSkinIssues().size());
        matchedIngredient.setIngredient($ingredient);
        System.out.println("[HYDRATION] Ingredient: " + $ingredient.getName() + " is " + matchedIngredient.getSkinIssuesValue()*100 + "% matched");
        insert(matchedIngredient);
end

// All skin issues must be present
rule "Group 2 - exfoliants" extends "Treatment requested"
    when
        $ingredient: Ingredient(ingredientGroup == IngredientGroup.EXFOLIANT,
                                        $ingrSkinIssues: targetedSkinIssues)
//        $matchedSkinIssues: Number(intValue == $ingrSkinIssues.size()) from accumulate (
        $matchedSkinIssues: Number() from accumulate (
            SkinIssue(
                name memberOf $patientSkinIssues
            ) from $ingrSkinIssues,
            count(1)
        )
    then
        MatchedIngredient matchedIngredient = new MatchedIngredient();
        matchedIngredient.setSkinIssuesValue($matchedSkinIssues.floatValue() / $ingredient.getTargetedSkinIssues().size());
        matchedIngredient.setIngredient($ingredient);
        System.out.println("[EXFOLIANT] Ingredient: " + $ingredient.getName() + " is " + matchedIngredient.getSkinIssuesValue()*100 + "% matched");
        insert(matchedIngredient);
end

// Last group, best combined. Skin properties not as important
rule "Group 3 - antioxidants" extends "Treatment requested"
salience -1
    when
        $ingredient: Ingredient(ingredientGroup == IngredientGroup.ANTIOXIDANT,
                                              $ingrSkinIssues: targetedSkinIssues)
        $matchedSkinIssues: Number() from accumulate (
          SkinIssue(
              name memberOf $patientSkinIssues
          ) from $ingrSkinIssues,
          count(1)
        )
    then
        MatchedIngredient matchedIngredient = new MatchedIngredient();
        matchedIngredient.setSkinIssuesValue($matchedSkinIssues.floatValue() / $ingredient.getTargetedSkinIssues().size());
        matchedIngredient.setIngredient($ingredient);
        System.out.println("[ANTIOXIDANT] Ingredient: " + $ingredient.getName() + " is " + matchedIngredient.getSkinIssuesValue()*100 + "% matched");
        insert(matchedIngredient);
end

// Only one can be recommended
rule "Group 4 - skin-restoring" extends "Treatment requested"
    when
        $ingredient: Ingredient(ingredientGroup == IngredientGroup.SKIN_RESTORING,
                                              $ingrSkinIssues: targetedSkinIssues)
        $matchedSkinIssues: Number() from accumulate (
          SkinIssue(
              name memberOf $patientSkinIssues
          ) from $ingrSkinIssues,
          count(1)
        )
    then
        MatchedIngredient matchedIngredient = new MatchedIngredient();
        matchedIngredient.setSkinIssuesValue($matchedSkinIssues.floatValue() / $ingredient.getTargetedSkinIssues().size());
        matchedIngredient.setIngredient($ingredient);
        System.out.println("[SKIN_RESTORING] Ingredient: " + $ingredient.getName() + " is " + matchedIngredient.getSkinIssuesValue()*100 + "% matched");
        insert(matchedIngredient);
end
