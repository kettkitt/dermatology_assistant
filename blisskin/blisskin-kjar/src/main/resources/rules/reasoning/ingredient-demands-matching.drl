package rules.reasoning;
dialect "mvel";

import sbnz.blisskin.model.dto.*;
import sbnz.blisskin.model.enumerations.*;
import sbnz.blisskin.model.*;

/*
 *  Environmental impacts
 */
rule "Environmental impact - low humidity"
salience 100
when
    $info: TreatmentRequest(humidity == Assessment.LOW)
then
    System.out.println("[ENV IMPACT] Low humidity");
    insert(new IngredientDemand(drools.getRule().getName()))
end

rule "Environmental impact - high humidity"
salience 100
when
    $info: TreatmentRequest(humidity == Assessment.HIGH)
then
    System.out.println("[ENV IMPACT] High humidity");
    insert(new IngredientDemand(drools.getRule().getName()))
end

rule "Environmental impact - low sun exposure"
salience 100
when
    $info: TreatmentRequest(sunExposure == Assessment.LOW)
then
    System.out.println("[ENV IMPACT] Low sun exposure");
    insert(new IngredientDemand(drools.getRule().getName()))
end

rule "Environmental impact - high sun exposure"
salience 100
when
    $info: TreatmentRequest(sunExposure == Assessment.HIGH)
then
    System.out.println("[ENV IMPACT] High sun exposure");
    insert(new IngredientDemand(drools.getRule().getName()))
end

/*
 * Patient age groups
 */
rule "Patient age 10 to 20"
salience 100
when
    $info: TreatmentRequest(patientAge >= 10, patientAge <= 20)
then
    System.out.println("[AGE] Patient age 10 to 20");
    insert(new IngredientDemand(drools.getRule().getName()))
end

rule "Patient age 20 to 40"
salience 100
when
    $info: TreatmentRequest(patientAge > 20, patientAge <= 40)
then
    System.out.println("[AGE] Patient age 20 to 40");
    insert(new IngredientDemand(drools.getRule().getName()))
end

rule "Patient age 40+"
salience 100
when
    $info: TreatmentRequest(patientAge > 40)
then
    System.out.println("[AGE] Patient age 40+");
    insert(new IngredientDemand(drools.getRule().getName()))
end

/*
 * Matching
 */

rule "Ingredient matched"
    when
        $matchedIngredient: MatchedIngredient(
            ingredient != null,
            ingredient.ingredientDemands.size() > 0,
            $ingredientDemands: ingredient.ingredientDemands)
        $allDemandsName: List() from accumulate (
            IngredientDemand($name: name) from $ingredientDemands,
            collectList($name)
        )
    then
end

rule "Age satisfied" extends "Ingredient matched"
    when
        Number(intValue >= 1) from accumulate (
            IngredientDemand(name.contains("Patient age"), name memberOf $allDemandsName),
            count(1)
        )
    then
        System.out.println("AGE SATISFIED");
        modify($matchedIngredient){setIngredientDemandsValue($matchedIngredient.getIngredientDemandsValue()+0.2);}
end

rule "Environmental impacts satisfied" extends "Ingredient matched"
no-loop
    when
        $noOfSatisfiedImpacts: Number(intValue >= 1) from accumulate (
            IngredientDemand(name.contains("Environmental impact"), name memberOf $allDemandsName),
            count(1)
        )
    then
        System.out.println("[ENV SATISFIED - " + $matchedIngredient.getIngredient().getName());
        modify($matchedIngredient){
            setIngredientDemandsValue($matchedIngredient.getIngredientDemandsValue()+(0.2*$noOfSatisfiedImpacts));
        }
end
